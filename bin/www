#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('teaamlab-step3:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// websocketプロトコルをlisten
var io = require('socket.io').listen(server);

var otherro = io.sockets.on('connection', function(socket) {
  //接続のidを確認
  console.log('connected', socket.id);

  // ログインした時
  socket.on('login', function(user) {
    user.socketId = socket.id;
    socket.broadcast.emit('login', user);
  });

  // バトルの申し込み
  socket.on('apply', function(opponent) {
    opponent.ownId=socket.id;
    io.to(opponent.id).emit('getApply', opponent)
  });

  // バトル画面に遷移する時
  socket.on('acceptBattle', function(opponent) {
    io.to(opponent.id).emit('battle', opponent)
  });

  // 接続が切断したとき
  socket.on('disconnect', function() {
    socket.broadcast.emit('disconne', socket.id);
  });

  /*
    バトル関連
  */
  socket.on('moveBattleS', function(user) {
    io.emit('roomConnect', user);
  });

  // ルーム別に管理
  socket.on("roomInit",function(info){
    //join(room)で部屋を作る
    socket.setRoominfo=info.room;
    socket.join(info.room); //roomIDごとに登録
    socket.join(socket.id); //個別に識別するためにsocketidを登録

    console.log("ROOM : " + info.room + " join. " + "USER ID ; " + socket.id);

    otherro.to(socket.setRoominfo).emit("logmessage", socket.id);
   });

});
